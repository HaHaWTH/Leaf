From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dreeam <61569423+Dreeam-qwq@users.noreply.github.com>
Date: Thu, 21 Sep 2023 02:56:22 -0400
Subject: [PATCH] Faster Natural Spawning


diff --git a/src/main/java/net/minecraft/util/RandomSource.java b/src/main/java/net/minecraft/util/RandomSource.java
index 9c6f5b55b1f1376fa75e216cd366ee47c79fafc4..7762c8186035fdf60e11d9f1844516b61f442206 100644
--- a/src/main/java/net/minecraft/util/RandomSource.java
+++ b/src/main/java/net/minecraft/util/RandomSource.java
@@ -15,6 +15,12 @@ public interface RandomSource {
         return create(RandomSupport.generateUniqueSeed());
     }
 
+    // Leaf start - Generate random seed faster
+    static RandomSource createFaster() {
+        return create(RandomSupport.generateFasterSeed());
+    }
+    // Leaf end
+
     @Deprecated
     static RandomSource createThreadSafe() {
         return new ThreadSafeLegacyRandomSource(RandomSupport.generateUniqueSeed());
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 25e93a0a58b0ecf02f2669fc8f01ef2f2f938dc7..a50c6d59cfd6286b4ab2f70b2918ba845f04bf94 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -128,6 +128,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     protected float oThunderLevel;
     public float thunderLevel;
     public final RandomSource random = RandomSource.create();
+    public final RandomSource randomFaster = RandomSource.createFaster(); // Leaf - Generate random seed faster
     /** @deprecated */
     @Deprecated
     private final RandomSource threadSafeRandom = RandomSource.createThreadSafe();
diff --git a/src/main/java/net/minecraft/world/level/NaturalSpawner.java b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
index 885d7c9ef96dd3c7576c28606e5ab83d2a75de71..31588bbfa4b80ed3ef19942bbe04baebd51e67fb 100644
--- a/src/main/java/net/minecraft/world/level/NaturalSpawner.java
+++ b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
@@ -405,12 +405,12 @@ public final class NaturalSpawner {
 
     private static BlockPos getRandomPosWithin(ServerLevel world, LevelChunk chunk) { // Gale - Airplane - Use ThreadUnsafeRandom for mob spawning - accept ServerLevel
         ChunkPos chunkcoordintpair = chunk.getPos();
-        // Gale start - Airplane - Use ThreadUnsafeRandom for mob spawning - use ThreadUnsafeRandom
-        int i = chunkcoordintpair.getMinBlockX() + world.randomTickRandom.nextInt(16);
-        int j = chunkcoordintpair.getMinBlockZ() + world.randomTickRandom.nextInt(16);
+        // Gale start - Airplane - Use ThreadUnsafeRandom for mob spawning - use ThreadUnsafeRandom // Leaf start - Generate random seed faster
+        int i = chunkcoordintpair.getMinBlockX() + world.randomFaster.nextInt(16);
+        int j = chunkcoordintpair.getMinBlockZ() + world.randomFaster.nextInt(16);
         // Gale end - Airplane - Use ThreadUnsafeRandom for mob spawning - use ThreadUnsafeRandom
         int k = chunk.getHeight(Heightmap.Types.WORLD_SURFACE, i, j) + 1;
-        int l = Mth.randomBetweenInclusive(world.randomTickRandom, world.getMinBuildHeight(), k);  // Gale - Airplane - Use ThreadUnsafeRandom for mob spawning - use ThreadUnsafeRandom
+        int l = Mth.randomBetweenInclusive(world.randomFaster, world.getMinBuildHeight(), k);  // Gale - Airplane - Use ThreadUnsafeRandom for mob spawning - use ThreadUnsafeRandom // Leaf end
         return new BlockPos(i, l, j);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/levelgen/RandomSupport.java b/src/main/java/net/minecraft/world/level/levelgen/RandomSupport.java
index 4327bee689e986561d126d6018d3fee7d2623176..267a28724ea0aea926c51c37e1172a2c34b47375 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/RandomSupport.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/RandomSupport.java
@@ -41,6 +41,12 @@ public final class RandomSupport {
         return SEED_UNIQUIFIER.updateAndGet(seedUniquifier -> seedUniquifier * 1181783497276652981L) ^ System.nanoTime();
     }
 
+    // Leaf start - Generate random seed faster
+    public static long generateFasterSeed() {
+        return SEED_UNIQUIFIER.updateAndGet((seedUniquifier) -> seedUniquifier * 1181783497276652981L)^ java.util.concurrent.ThreadLocalRandom.current().nextLong();
+    }
+    // Leaf end
+
     public static record Seed128bit(long seedLo, long seedHi) {
         public RandomSupport.Seed128bit xor(long seedLo, long seedHi) {
             return new RandomSupport.Seed128bit(this.seedLo ^ seedLo, this.seedHi ^ seedHi);
